generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Client {
  id           Int           @id @default(autoincrement())
  username     String
  password     String
  email        String        @unique
  createdAt    DateTime      @default(now())
  appointments Appointment[]
  categories   Category[]
  cart         Cart?
  cellphone    String
  profile      Profile?
}

model Employee {
  id              Int           @id @default(autoincrement())
  username        String
  password        String
  availability    String?
  role            Role
  email           String        @unique
  hiredAt         DateTime      @default(now())
  appointments    Appointment[]
  cellphone       String
  profile         Profile?
  services        Service[]
  academicLevel   AcademicLevel @relation(fields: [academicLevelId], references: [id])
  academicLevelId Int
}

model AcademicLevel {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  employees   Employee[]
}

model Profile {
  id         Int       @id @default(autoincrement())
  bio        String
  photo      Picture?
  client     Client?   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId   Int?      @unique
  employee   Employee? @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId Int?      @unique
}

model Picture {
  id        Int      @id @default(autoincrement())
  url       String   @db.LongText
  name      String
  profile   Profile? @relation(fields: [profileId], references: [id])
  service   Service? @relation(fields: [serviceId], references: [id])
  serviceId Int?     @unique
  profileId Int?     @unique
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  services    Service[]
  clients     Client[]
  products    Product[]
}

model CodeValidationToEmployee {
  id          Int     @id @default(autoincrement())
  characters  String  @unique
  description String?
}

model Service {
  id           Int           @id @default(autoincrement())
  categoryId   Int
  name         String
  description  String
  price        Float
  duration     Int // Duration in minutes
  appointments Appointment[]
  picture      Picture?
  employees    Employee[]

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Appointment {
  id         Int      @id @default(autoincrement())
  clientId   Int
  employeeId Int
  serviceId  Int
  date       DateTime
  reason     String?
  hour       String
  status     Status   @default(PENDING)
  cart       Cart?    @relation(fields: [cartId], references: [id])
  cartId     Int?
  client     Client   @relation(fields: [clientId], references: [id])
  employee   Employee @relation(fields: [employeeId], references: [id])
  service    Service  @relation(fields: [serviceId], references: [id])
  payment    Payment?
}

model Cart {
  id          Int           @id @default(autoincrement())
  clientId    Int           @unique
  appointment Appointment[]
  client      Client        @relation(fields: [clientId], references: [id])
}

model Payment {
  id            Int      @id @default(autoincrement())
  appointmentId Int      @unique
  amount        Float
  paymentMethod String
  paymentDate   DateTime @default(now())
  status        String

  appointment Appointment @relation(fields: [appointmentId], references: [id])
}

model Product {
  id          Int    @id @default(autoincrement())
  categoryId  Int
  name        String
  price       Float
  description String
  stock       Stock?

  category Category @relation(fields: [categoryId], references: [id])
}

model Stock {
  id          Int      @id @default(autoincrement())
  productId   Int      @unique
  quantity    Int
  lastUpdated DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
}

enum Role {
  EMPLOYEE
  MANAGER
}

enum Status {
  PENDING
  CONFIRMED
  CANCELED
}
